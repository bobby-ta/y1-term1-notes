C programs are run in processes
    Created by OS
    Manages resources needed to run program
    Each has a unique process identifier (pid)
    OS allocates processor time to each process
    Each process is strictly isolated on hardware level
        Can't use each other's memory
    Defines a virtual address space
        Program has its own private memory
        Runs as if it were the only one running on the computer
    Processes run on virtual memory system
        Maps virtual address space to real physical memory
        Programs can share the same physical memory and resources
        But each program sees only itself

Virtual address space - memory the program can see
    Measured in bytes
    Continuous sequence of memory in concept
        Actually divided into diff segments for diff purposes
            One for code, one for static data, one for global etc.
            Large unused gaps between active segments
    Each memory location in virtual address space has its own location

Pointer holds virtual memory address of first byte of a value
    Can be variable, data structure, or function
    Size depends on machine - typically 64-bit
        64 bits can represent 16 exabytes' (2^64) worth of memory addresses
        But in fact only 48 bits are used to represent memory location
            Remaining 16 are used for memory mapping
    Pointer values are virtual addresses
        Unless code is OS-level (can access hardware)
        Or running on basic hardware without OS, e.g. Arduino

Pointer-based data structures give greater freedom and efficiency
    Linked lists
        Use much smaller chunks of scattered memory
        Can grow and shrink
    Binary trees
        Used by databases for very quick indexing and searching

Pointer name always preceded by *
    e.g. int *p = &i; is a pointer to an int
Pointer can point to any type
Can have a pointer to a pointer int **q = &p;
    Can build dynamic multi-dimensional arrays
        More efficient, saves resources
        No need to allocate arbitrary block of memory to array
Can have a pointer to a function int (*functionPointer) (int)
    Promotes functions to first-class values
    Used to implement callback functions (functions passed as arguments)

Address-of operator &
    Returns address of variable, used to assign value to pointer, e.g.
        int i = 10;
        int *p = &i; //p points at i
    If variable goes out of scope, pointer will still point at the same address - which might be in use by another variable

De-reference/indirection operator * (same as pointer initialiser)
    int n = 10;
    int *p = &n;
    int t = *p; //Get value pointed at by pointer, t = 10
    *p = 20; //Assign value to location pointed at, n = 20

!!!IMPORTANT SYNTAX!!!
    *p reads/writes WHAT IS STORED at the pointer location
    p reads/writes the pointer LOCATION

Arrays decay to pointers to their first element
    int *p = myarr; is the same as iint *p = &(myarr[0]);
    char *p = mystr; is the same as char *p = &(mystr[0]);

Pointer arithmetic
    Adding an offset to the pointer allows access to nth element, e.g.
        int myarr[5] = {1, 2, 3, 4, 5};
        int *p = myarr;
        printf("%i \n", *(p+1)); //prints 2

    Offset takes into account value sizes - no need to calculate actual number of pointer to nth element

Pointers and arrays
    Square bracket syntax myarr[n] is just syntactic sugar for *(a+n)
    Arrays passed as function arguments also just decay into pointers
        So only pointer copied into function, not array
        Changes made to array inside function persist outside of function
            E.g. a function that returns sorted array will permanently sort the array that is passed to it

Array size
    sizeof determines size of array DEFINED USING AN ARRAY TYPE
        e.g. int myarr[] = {1, 2, 3, 4, 5} //myarr has type int[5]
        Array doesn't store its own size
        Length can also be calculated by sizeof(myarr)/sizeof(myarr[0])
    Pointer to array only represents 1 memory location
        So sizeof(*p) will equal sizeof(myarr[0]) and not sizeof(myarr)
        And functions need array size to be passed as argument
    Arrays of size 0 cannot be defined

String length
    C string is a character array with \0 marking end
    Can subtract first pointer from last pointer
    Like so
        int mystrlen(char *mystr) {
            char *c = mystr; //Equivalent to char *c = &(mystr[0])
            while (*c) ++c;
            return c - mystr; //Subtract pointer to mystr[0] from pointer to \0, to get length
        }

String copy
    void strcpy(char *to, char *from) {
        while (*to++ = *from++);
    }
    //While *from != \0, assign value at *from to *to
    //And increment both pointers

    //Comprehensible version
    void strcpy(char *to, char *from) {
        while (*from) {
            *to = *from;
            from++;
            to++;
        }
        *to = "\0"
    }

    strcpy is unsafe - doesn't check:
        If memory allocated
        If destination array big enough
        If pointers valid
        If strings are null-terminated
        If arrays overlap

Variable swap
    void swap(int *a, int *b) {
        int temp = *a;
        *a = *b;
        *b = temp;
    }
    //Modifies *a and *b directly (can't do the same with just variables)

